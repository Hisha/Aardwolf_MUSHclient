<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, May 04, 2024, 3:52 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "HibPlugin" generated by Plugin Wizard -->

<muclient>
<plugin
   name="HibPlugin"
   author="Hiballl"
   id="e81303364f53ab26d34d5436"
   language="Lua"
   purpose="Plugin to combine all plugins for cleanup"
   save_state="y"
   date_written="2024-05-04 15:48:10"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="HibPlugin"
   match="^You raise a level! You are now level (?P&lt;levelCurrent&gt;.*)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>levelRaise("%&lt;levelCurrent&gt;")</send>
  </trigger>
  <trigger
   enabled="y"
   group="HibPlugin"
   match="^\* Remort transformation complete!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>levelRaise("1")</send>
  </trigger>
</triggers>

<!--  Aliases  -->
<aliases>

	<!-- HibPlugin Section -->
  <alias
   match="^hib -help$"
   enabled="y"
   group="HibPlugin"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("************ HibPlugin Commands ************")
		Note(" hib -help     - This list of commands      ")
		Note(" hib -vars     - List of variable values    ")
		Note(" hib_Level     - Set Player level variable  ")
		Note(" hib_Tier      - Set Tier level variable    ")
		Note("********************************************")</send>
  </alias>
  <alias
   match="^hib -vars$"
   enabled="y"
   group="HibPlugin"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("************HibPlugin Variables *************")
		Note(" Current Level:      " ..getPlayerLevel())
		Note(" Current Tier:       " ..getPlayerTier())
		Note("*********************************************")</send>
  </alias>
  <alias
   match="^hib_Level( .*){0,1}$"
   enabled="y"
   group="HibPlugin"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setLevel(Trim("%1"))</send>
  </alias>
  <alias
   match="^hib_Tier( .*){0,1}$"
   enabled="y"
   group="HibPlugin"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setTier(Trim("%1"))</send>
  </alias>
  <!-- HibPlugin Section -->
  
  <!-- Weapon Master Section -->
  <alias
   match="^wm -help$"
   enabled="y"
   group="WeaponMaster"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("***********Weapon Master Commands **********")
		Note(" wmSD          - Swaps to dual wield       ")
		Note(" wmSU          - Swaps to shield           ")
        Note(" wmAlt         - Swaps to alternate weapon ")
		Note(" wmPri         - Swaps to primary weapon   ")
        Note(" wmSwap        - Swaps to level correct    ")
        Note("                   weapon configuration    ")
        Note(" weaponAdd     - Add weapon to database    ")
        Note(" holdAdd       - Add hold item to database ")
        Note(" shieldAdd     - Add shield to database    ")
		Note(" weaponList    - List of weapons in db     ")
		Note(" holdList      - List of hold items in db  ")
		Note(" shieldList    - List of shields in db     ")
        Note(" wm -help      - This list of commands     ")
		Note(" wm -vars      - List of variable values   ")
		Note(" wm WeapBag    - Set Weapon bag variable   ")
		Note("********************************************")</send>
  </alias>
  <alias
   match="^wm -vars$"
   enabled="y"
   group="WeaponMaster"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("**************Weapon Variables **************")
		Note(" Weapon Bag:         " ..getWeaponBag())
		Note(" Shield Up:          " ..getShieldUp())
		Note(" Alt Up:             " ..getAltUp())
		Note(" Current MH:         " ..getMHCurrent())
		Note(" Current OH:         " ..getOHCurrent())
		Note(" Current Hold Item:  " ..getHoldCurrent())
		Note(" Current Shield:     " ..getShieldCurrent())
		Note(" Current Alt:        " ..getAltCurrent())
		Note("*********************************************")</send>
  </alias>
  <alias
   match="^wm WeapBag( .*){0,1}$"
   enabled="y"
   group="WeaponMaster"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setWeaponBag(Trim("%1"))
Note ("Weapons Bag is now: " ..Trim("%1"))</send>
  </alias>
  <alias
   match="^weaponAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>weaponInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^holdAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>holdInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^shieldAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>shieldInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^wmSU$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="shieldUp"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmSD$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="shieldDown"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmSwap$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="weapSwap"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmAlt$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="altUp"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmPri$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="altDown"
   sequence="100"
  >
  </alias>
  <alias
   match="^weaponList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getWeaponList"
   sequence="100"
  >
  </alias>
  <alias
   match="^holdList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getHoldList"
   sequence="100"
  >
  </alias>
  <alias
   match="^shieldList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getShieldList"
   sequence="100"
  >
  </alias>
  <!-- Weapon Master Section -->
  
</aliases>
<!--  Variables  -->

<variables>
</variables>

<!--  Script  -->
<script>

	<!-- HibPlugin Section -->
	function OnPluginInstall()
		DbandVerCheck()
	end
	
	function databasePathName()
		dbCharacterName = "HibPlugin-" ..GetInfo (3)
		dbPath = GetInfo (66)
		databasePaN = dbPath .. dbCharacterName
		return databasePaN
	end
	
	function DbandVerCheck()
		
		dbPathandName = databasePathName()
		local pluginVer = GetPluginInfo (GetPluginID (),19)
		local versioN = 0
		local sQL ="SELECT version FROM dbVer;"
		local verTable = false
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows("SELECT name FROM sqlite_master WHERE type='table' AND name='dbVer';") do verTable = true end
		if verTable == false then
			createHibDB()
		else
			for a in myDB:nrows(sQL) do versioN = a.version end
			myDB:close()
			
			if versioN ~= pluginVer then
				updateHibDB()
			else
				print("HibPlugin db current")
			end
			
		end
		
	end
	
	function createHibDB()
		tableCreateDBVer()
		weaponMasterTableCreate()
		tableCreateUserLevel()
		tableCreateUserTier()
	end
	
	function updateHibDB()
		tableUpdateDBVer()
		weaponMasterTableCreate()
		tableCreateUserLevel()
		tableCreateUserTier()
	end
	
	function tableCreateDBVer()
		local pluginVer = GetPluginInfo (GetPluginID (),19)
		local sQL = "INSERT INTO dbVer VALUES (" ..pluginVer.. ");"
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "dbVer" (	"version"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("version"))]=]
		myDB:exec(sQL)
		myDB:close()
		print("HibPlugin db created!")
	end
	
	function tableUpdateDBVer()
		local pluginVer = GetPluginInfo (GetPluginID (),19)
		local sQL = "UPDATE dbVer SET version = " ..pluginVer.. ";"
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "dbVer" (	"version"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("version"))]=]
		myDB:exec(sQL)
		myDB:close()
		print("HibPlugin db created!")
	end
	
	function tableCreateUserLevel()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "userLevel" (	"uLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("uLevel"))]=]
		myDB:exec[=[INSERT INTO userLevel VALUES (1);]=]
		myDB:close()
		print("userLevel table created!")
	end
	
	function tableCreateUserTier()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "userTier" (	"uTier"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("uTier"))]=]
		myDB:exec[=[INSERT INTO userTier VALUES (1);]=]
		myDB:close()
		print("userTier table created!")
	end
	
	function getPlayerLevel()
		dbPathandName = databasePathName()
		local sQL = "SELECT uLevel FROM userLevel;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do playerLevel = row.uLevel end
		returnInfo = playerLevel
		myDB:close()
		
		return returnInfo
	end
	
	function setLevel(newLevel)
		dbPathandName = databasePathName()
		local sQL = "UPDATE userLevel SET uLevel = " ..newLevel.. ";"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Current Level is now: " ..newLevel)
		end
	end
		
	function getTieredLevel()
		local level = getPlayerLevel()
		local tier = getPlayerTier()
		local tieredLevel = (level + (tier * 10))
	
		return tieredLevel
	end
	
	function setTier(newTier)
		dbPathandName = databasePathName()
		local sQL = "UPDATE userTier SET uTier = " ..newTier.. ";"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Current Tier is now: " ..newTier)
		end
	end
	
	function getPlayerTier()
		dbPathandName = databasePathName()
		local sQL = "SELECT uTier FROM userTier;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do playerTier = row.uTier end
		returnInfo = playerTier
		myDB:close()
		
		return returnInfo
	end
	
	<!-- Weapon Master Section -->
	function weaponMasterTableCreate()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "wm_vars" (	"altCurrent"	TEXT NOT NULL,	"altUp"	TEXT NOT NULL,	"holdCurrent"	TEXT NOT NULL,	"mhCurrent"	TEXT NOT NULL,	"ohCurrent"	TEXT NOT NULL,	"shieldCurrent"	TEXT NOT NULL,	"shieldUp"	TEXT NOT NULL,	"weaponBag"	TEXT NOT NULL)]=]
		myDB:exec[=[INSERT INTO wm_vars VALUES ('None','Pri','None','None','None','None','ShieldDown','None');]=]
		myDB:exec[=[CREATE TABLE "weapons" (	"weapId"	INTEGER NOT NULL UNIQUE,	"weapName"	TEXT NOT NULL UNIQUE,	"weapLevel"	INTEGER NOT NULL,	"weapMainOff"	INTEGER NOT NULL,	"weapPriAlt"	INTEGER NOT NULL,	PRIMARY KEY("weapId" AUTOINCREMENT))]=]
		myDB:exec[=[CREATE TABLE "holditems" (	"hiId"	INTEGER NOT NULL UNIQUE,	"hiName"	TEXT NOT NULL UNIQUE,	"hiLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("hiId" AUTOINCREMENT))]=]
		myDB:exec[=[CREATE TABLE "shields" (	"shieldId"	INTEGER NOT NULL UNIQUE,	"shieldName"	TEXT NOT NULL UNIQUE,	"shieldLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("shieldId" AUTOINCREMENT))]=]
		myDB:close()
		print("weaponMaster tables created!")
	end
	
	function getAltCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT altCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altCURRENT = row.altCurrent end
		returnInfo = altCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setAltCurrent(newAlt)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET altCurrent = '" ..newAlt.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getAltUp()
		dbPathandName = databasePathName()
		local sQL = "SELECT altUp from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altUP = row.altUp end
		returnInfo = altUP
		myDB:close()
		
		return returnInfo
	end
	
	function setAltUp()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET altUp = 'Alt';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function setAltDown()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET altUp = 'Pri';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getHoldCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT holdCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do holdCURRENT = row.holdCurrent end
		returnInfo = holdCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setHoldCurrent(newHold)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET holdCurrent = '" ..newHold.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getMHCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT mhCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do MHCURRENT = row.mhCurrent end
		returnInfo = MHCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setMHCurrent(newMH)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET mhCurrent = '" ..newMH.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getOHCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT ohCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do OHCURRENT = row.ohCurrent end
		returnInfo = OHCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setOHCurrent(newOH)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET ohCurrent = '" ..newOH.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getShieldCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT shieldCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do ShieldCURRENT = row.shieldCurrent end
		returnInfo = ShieldCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setShieldCurrent(newShield)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET shieldCurrent = '" ..newShield.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getShieldUp()
		dbPathandName = databasePathName()
		local sQL = "SELECT shieldUp from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do shieldUP = row.shieldUp end
		returnInfo = shieldUP
		myDB:close()
		
		return returnInfo
	end
	
	function setShieldUp()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET shieldUp = 'ShieldUp';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
	end
	
	function setShieldDown()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET shieldUp = 'ShieldDown';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getWeaponBag()
		dbPathandName = databasePathName()
		local sQL = "SELECT weaponBag from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do weaponBAG = row.weaponBag end
		returnInfo = weaponBAG
		myDB:close()
		
		return returnInfo
	end
	
	function setWeaponBag(newWeaponBag)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET weaponBag = '" ..newWeaponBag.. "';"
		print(sQL)
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
		
	function inputLevel()
		results = utils.inputbox ("Item Level", "Enter Level","","Courier",10,{validate = level_Check,max_length = 3})
		return results
	end
	
	function level_check(l)
		local n = tonumber (l)
		
		if not n then
			utils.msgbox (l .. " is not numeric")
			return false
		end
		
		if n &lt; 1 or n > 291 then
			utils.msgbox (l .. " is out of range 1 to 291")
			return false
		end
				
		return true
	end
	
	function chooseMHOH()
		t = {"Main Hand","Off Hand"}
		results = utils.choose ("Main hand or Off hand?", "Weapon info", t, 1)
		if results then
			return results
		else
			return 1
		end	
	end
	
	function choosePriAlt()
		t = {"Primary","Alternative"}
		results = utils.choose ("Primary weapon or alternative?", "Weapon info", t, 1)
		if results then
			return results
		else
			return 1
		end
	end
	
	function weaponInsert(wi_weapname)
		local dup = weaponDupCheck(wi_weapname)
		if dup == true then
			print("Weapon already exists!")
		else
			resultsLevel = inputLevel()
			resultsMHOH = chooseMHOH()
			resultsPriAlt = choosePriAlt()
			insertWeapon(wi_weapname,resultsLevel,resultsMHOH,resultsPriAlt)
		end
	end
		
	function weaponDupCheck(iw_weapname)
		dbPathandName = databasePathName()
		local dupCheck = false
		local sQL = "SELECT * FROM weapons WHERE weapname = '" ..iw_weapname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertWeapon(iw_weapname,iw_weaplevel,iw_weapmainoff,iw_weapprialt)
		dbPathandName = databasePathName()
		local sQL = "INSERT INTO weapons (weapName,weapLevel,weapMainOff,weapPriAlt) VALUES ('" ..iw_weapname.. "'," ..iw_weaplevel.. "," ..iw_weapmainoff.. "," ..iw_weapprialt.. ");"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Weapon Added!")
		end
	end
	
	function holdInsert(hi_holdname)
		local dup = holdDupCheck(hi_holdname)
		if dup == true then
			print("Hold item already exists!")
		else
			resultsLevel = inputLevel()
			insertHold(hi_holdname,resultsLevel)
		end
	end
	
	function holdDupCheck(ih_holdname)
		dbPathandName = databasePathName()
		local dupCheck = false
		local sQL = "SELECT * FROM holditems WHERE hiName = '" ..ih_holdname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertHold(ih_holdname,ih_holdlevel)
		dbPathandName = databasePathName()
		local sQL = "INSERT INTO holditems (hiName,hiLevel) VALUES ('" ..ih_holdname.. "'," ..ih_holdlevel.. ");"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Hold item Added!")
		end
	end
	
	function shieldInsert(si_shieldname)
		local dup = shieldDupCheck(si_shieldname)
		if dup == true then
			print("Sheild already exists!")
		else
			resultsLevel = inputLevel()
			insertShield(si_shieldname,resultsLevel)
		end
	end
	
	function shieldDupCheck(is_shieldname)
		dbPathandName = databasePathName()
		local sQL = "SELECT * FROM shields WHERE shieldName = '" ..is_shieldname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertShield(is_shieldname,is_shieldlevel)
		dbPathandName = databasePathName()
		local sQL = "INSERT INTO shields (shieldName,shieldLevel) VALUES ('" ..is_shieldname.. "'," ..is_shieldlevel.. ");"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Shield Added!")
		end
	end
	
	function shieldUp()
		setShieldUp()
		
		SendNoEcho ("take " ..getHoldCurrent().. " " ..getWeaponBag())
		SendNoEcho ("take " ..getShieldCurrent().. " " ..getWeaponBag())
		SendNoEcho ("hold " ..getShieldCurrent())
		SendNoEcho ("hold " ..getHoldCurrent())
		SendNoEcho ("put " ..getOHCurrent().. " " ..getWeaponBag())
	end
	
	function shieldDown()
		setShieldDown()
		
		SendNoEcho ("take " ..getOHCurrent().. " " ..getWeaponBag())
		SendNoEcho ("second " ..getOHCurrent())
		SendNoEcho ("put " ..getShieldCurrent().. " " ..getWeaponBag())
		SendNoEcho ("put " ..getHoldCurrent().. " " ..getWeaponBag())
	end
	
	function altUp()
		if getAltUp() ~= "Alt" then
			if getAltCurrent() ~= "None" then
				setAltUp()
				
				SendNoEcho ("take " ..getAltCurrent().. " " ..getWeaponBag())
				SendNoEcho ("wield " ..getAltCurrent())
				SendNoEcho ("put " ..getMHCurrent().. " " ..getWeaponBag())
			else
				possibleAlt = getAltName()
				if possibleAlt ~= "None" then
					setAltUp()
					setAltCurrent(possibleAlt)
					SendNoEcho ("take " ..getAltCurrent().. " " ..getWeaponBag())
					SendNoEcho ("wield " ..getAltCurrent())
					SendNoEcho ("put " ..getMHCurrent().. " " ..getWeaponBag())
				else
					print("No Alt weapons found!")
				end
			end
		end
	end
	
	function altDown()
		if getAltUp() ~= "Pri" then
			if getAltCurrent() ~= "None" then
				setAltDown()
				SendNoEcho ("take " ..getMHCurrent().. " " ..getWeaponBag())
				SendNoEcho ("wield " ..getMHCurrent())
				SendNoEcho ("put " ..getAltCurrent().. " " ..getWeaponBag())
			else
				print("No Alt weapons set!")
			end
		end
	end
	
	function getMHName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 1 AND weapPriAlt = 1 ORDER BY weapLevel DESC LIMIT 1;"
		print(sQL)
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do mhCurrent = row.weapName end
		returnInfo = mhCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getOHName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 2 AND weapPriAlt = 1 ORDER BY weapLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do ohCurrent = row.weapName end
		returnInfo = ohCurrent
		myDB:close()
		if returnInfo == nil then
			returnInfo = "None"
		end
		return returnInfo
	end
	
	function getAltName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 1 AND weapPriAlt = 2 ORDER BY weapLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altCurrent = row.weapName end
		returnInfo = altCurrent
		myDB:close()
		if returnInfo == nil then
			returnInfo = "None"
		end
		return returnInfo
	end
	
	function getHoldName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT hiName FROM holditems WHERE hiLevel &lt;= " ..modLevel.. " ORDER BY hiLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do holdCurrent = row.hiName end
		returnInfo = holdCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getShieldName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT shieldName FROM shields WHERE shieldLevel &lt;= " ..modLevel.. " ORDER BY shieldLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do shieldCurrent = row.shieldName end
		returnInfo = shieldCurrent
		myDB:close()
		
		return returnInfo
	end

	function weapSwap()
		local altUp = getAltUp()
		local shieldUp = getShieldUp()
		local newMHName = getMHName()
		local currentMHName = getMHCurrent()
		print(altUp)
		print(shieldUp)
		print(newMHName)
		print(currentMHName)
		if newMHName ~= currentMHName and altUp == "Pri" then
			setMHCurrent(newMHName)
			SendNoEcho("get " ..newMHName.. " " ..getWeaponBag())
			SendNoEcho("wield " ..newMHName)
			SendNoEcho("put " ..currentMHName.. " " ..getWeaponBag())
		elseif newMHName ~= currentMHName and altUp == "Alt" then
			setMHCurrent(newMHName)
		end
		
		local newOHName = getOHName()
		local currentOHName = getOHCurrent()
		if newOHName ~= currentOHName and shieldUp == "ShieldDown" then
			setOHCurrent(newOHName)
			SendNoEcho("get " ..newOHName.. " " ..getWeaponBag())
			SendNoEcho("second " ..newOHName)
			SendNoEcho("put " ..currentOHName.. " " ..getWeaponBag())
		elseif newOHName ~= currentOHName and shieldUp == "ShieldUp" then
			setOHCurrent(newOHName)
		end
		
		local newHoldName = getHoldName()
		local currentHoldName = getHoldCurrent()
		if newHoldName ~= currentHoldName and shieldUp == "ShieldUp" then
			setHoldCurrent(newHoldName)
			SendNoEcho("get " ..newHoldName.. " " ..getWeaponBag())
			SendNoEcho("wear " ..newHoldName)
			SendNoEcho("put " ..currentHoldName.. " " ..getWeaponBag())
		elseif newHoldName ~= currentHoldName and shieldUp == "ShieldDown" then
			setHoldCurrent(newHoldName)
		end
		
		local newShieldName = getShieldName()
		local currentShieldName = getShieldCurrent()
		if newShieldName ~= currentShieldName and shieldUp == "ShieldUp" then
			setShieldCurrent(newShieldName)
			SendNoEcho("get " ..newShieldName.. " " ..getWeaponBag())
			SendNoEcho("wear " ..newShieldName)
			SendNoEcho("put " ..currentShieldName.. " " ..getWeaponBag())
		elseif newShieldName ~= currentShieldName and shieldUp == "ShieldDown" then
			setShieldCurrent(newShieldName)
		end
		
		local newAltName = getAltName()
		local currentAltName = getAltCurrent()
		if newAltName ~= currentAltName and altUp == "Alt" then
			setAltCurrent(newAltName)
			SendNoEcho("get " ..newAltName.. " " ..getWeaponBag())
			SendNoEcho("wield " ..newAltName)
			SendNoEcho("put " ..currentAltName.. " " ..getWeaponBag())
		elseif newAltName ~= currentAltName and altUp == "Pri" then
			setAltCurrent(newAltName)
		end
	end
	
	function getWeaponList()
		dbPathandName = databasePathName()
		local sQL = "SELECT weapName,weapLevel,weapMainOff,weapPriAlt FROM weapons ORDER BY weapLevel,weapMainOff,weapPriAlt"
		local priAlt = ""
		local mainOff = ""
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("                    Weapon List                        ")
			print("    Name         Level       Main/Off      Pri/Alt     ")
			print("---------------------------------------------------------------")
		for row in myDB:nrows(sQL) do
			if row.weapMainOff == 1 then
				mainOff = "MainHand"
			else
				mainOff = "OffHand"
			end
			if row.weapPriAlt == 1 then
				priAlt = "Primary"
			else
				priAlt = "Alternate"
			end
			print(" " ..row.weapName.. "         " ..row.weapLevel.. "         " ..mainOff.. "         " ..priAlt)
		
		end	
			print("---------------------------------------------------------------")
		myDB:close()
		
	end
	
	function getHoldList()
		dbPathandName = databasePathName()
		local sQL = "SELECT hiName,hiLevel FROM holditems ORDER BY hiLevel"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("        Hold List            ")
			print("    Name         Level       ")
			print("-----------------------------")
		for row in myDB:nrows(sQL) do
			print(" " ..row.hiName.. "         " ..row.hiLevel)
		end	
			print("-----------------------------")
		myDB:close()
		
	end
	
	function getShieldList()
		dbPathandName = databasePathName()
		local sQL = "SELECT shieldName,shieldLevel FROM shields ORDER BY shieldLevel"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("       Shield List           ")
			print("    Name         Level       ")
			print("-----------------------------")
		for row in myDB:nrows(sQL) do
			print(" " ..row.shieldName.. "         " ..row.shieldLevel)
		end	
			print("-----------------------------")
		myDB:close()
		
	end
	<!-- Weapon Master Section -->
	
</script>

</muclient>
