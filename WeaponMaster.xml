<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, March 06, 2024, 8:16 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "WeaponMaster" generated by Plugin Wizard -->

<muclient>
<plugin
   name="WeaponMaster"
   author="Hiballl"
   id="d184f5b20159962807daf036"
   language="Lua"
   purpose="Weapon control plugin"
   save_state="y"
   date_written="2024-03-06 08:15:35"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="WeaponMaster"
   match="^You raise a level! You are now level (?P&lt;levelCurrent&gt;.*)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable("wm_CurrentLevel","%&lt;levelCurrent&gt;")</send>
  </trigger>
  <trigger
   enabled="y"
   group="WeaponMaster"
   match="^\* Remort transformation complete!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable("wm_CurrentLevel","1")</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="^wm -help$"
   enabled="y"
   group="WeaponMaster"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("***********Weapon Master Commands **********")
		Note(" wmSD          - Swaps to dual wield       ")
		Note(" wmSU          - Swaps to shield           ")
        Note(" wmAlt         - Swaps to alternate weapon ")
		Note(" wmPri         - Swaps to primary weapon   ")
        Note(" wmSwap        - Swaps to level correct    ")
        Note("                   weapon configuration    ")
        Note(" weaponAdd     - Add weapon to database    ")
        Note(" holdAdd       - Add hold item to database ")
        Note(" shieldAdd     - Add shield to database    ")
		Note(" weaponList    - List of weapons in db     ")
		Note(" holdList      - List of hold items in db  ")
		Note(" shieldList    - List of shields in db     ")
        Note(" wm -help      - This list of commands     ")
		Note(" wm -vars      - List of variable values   ")
		Note(" wm DBFile     - Set db filename           ")
        Note(" wm Level      - Set Current level variable")
        Note(" wm Tier       - Set Tier level variable   ")
		Note(" wm WeapBag    - Set Weapon bag variable   ")
		Note("********************************************")</send>
  </alias>
  <alias
   match="^wm -vars$"
   enabled="y"
   group="WeaponMaster"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("***********Weapon Variables ***********")
		Note(" DB Filename:        " ..GetVariable("wm_DBFile"))
		Note(" Current Level:      " ..GetVariable("wm_CurrentLevel"))
		Note(" Current Tier:       " ..GetVariable("wm_Tier"))
		Note(" Weapon Bag:         " ..GetVariable("wm_WeapBag"))
		Note(" Shield Up:          " ..GetVariable("wm_ShieldUp"))
		Note(" Alt Up:             " ..GetVariable("wm_AltUp"))
		Note(" Current MH:         " ..GetVariable("wm_MHCurrent"))
		Note(" Current OH:         " ..GetVariable("wm_OHCurrent"))
		Note(" Current Hold Item:  " ..GetVariable("wm_HoldCurrent"))
		Note(" Current Shield:     " ..GetVariable("wm_ShieldCurrent"))
		Note(" Current Alt:        " ..GetVariable("wm_AltCurrent"))
		Note("*********************************************")</send>
  </alias>
  <alias
   match="^wm DBFile( .*){0,1}$"
   enabled="y"
   group="WeaponMaster"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("wm_DBFile",Trim("%1"))
Note ("Current db filename is now: " ..Trim("%1"))
DbandVerCheck()</send>
  </alias>
  <alias
   match="^wm Level( .*){0,1}$"
   enabled="y"
   group="WeaponMaster"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("wm_CurrentLevel",Trim("%1"))
Note ("Current Level is now: " ..Trim("%1"))</send>
  </alias>
  <alias
   match="^wm Tier( .*){0,1}$"
   enabled="y"
   group="WeaponMaster"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("wm_Tier",Trim("%1"))
Note ("Current Tier is now: " ..Trim("%1"))</send>
  </alias>
  <alias
   match="^wm WeapBag( .*){0,1}$"
   enabled="y"
   group="WeaponMaster"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("wm_WeapBag",Trim("%1"))
Note ("Weapons Bag is now: " ..Trim("%1"))</send>
  </alias>
  <alias
   match="^weaponAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>weaponInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^holdAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>holdInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^shieldAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>shieldInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^wmSU$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="shieldUp"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmSD$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="shieldDown"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmSwap$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="weapSwap"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmAlt$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="altUp"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmPri$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="altDown"
   sequence="100"
  >
  </alias>
  <alias
   match="^weaponList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getWeaponList"
   sequence="100"
  >
  </alias>
  <alias
   match="^holdList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getHoldList"
   sequence="100"
  >
  </alias>
  <alias
   match="^shieldList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getShieldList"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Variables  -->

<variables>
  <variable name="wm_DBFile">weaponMaster</variable>
  <variable name="wm_CurrentLevel">1</variable>
  <variable name="wm_Tier">0</variable>
  <variable name="wm_ShieldUp">ShieldDown</variable>
  <variable name="wm_AltUp">Pri</variable>
  <variable name="wm_WeapBag">None</variable>
  <variable name="wm_MHCurrent">None</variable>
  <variable name="wm_OHCurrent">None</variable>
  <variable name="wm_HoldCurrent">None</variable>
  <variable name="wm_ShieldCurrent">None</variable>
  <variable name="wm_AltCurrent">None</variable>
</variables>

<!--  Script  -->
<script>

	function OnPluginInstall ()
		DbandVerCheck()
	end
	
	function DbandVerCheck()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL ="SELECT version FROM dbVer;"
		local verTable = false
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows("SELECT name FROM sqlite_master WHERE type='table' AND name='dbVer';") do verTable = true end
		if verTable == false then
			createWMDB()
		else
			for a in myDB:nrows(sQL) do versioN = a[version] end
			myDB:close()
			--Needs code to check vers plugin version, but for now hard code to 1.
			if not versioN == 1 then
				createWMDB()
			else
				print("WeaponMaster db current")
			end
		end
		
	end
	
	function createWMDB()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "dbVer" (	"version"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("version"))]=]
		myDB:exec[=[CREATE TABLE "weapons" (	"weapId"	INTEGER NOT NULL UNIQUE,	"weapName"	TEXT NOT NULL UNIQUE,	"weapLevel"	INTEGER NOT NULL,	"weapMainOff"	INTEGER NOT NULL,	"weapPriAlt"	INTEGER NOT NULL,	PRIMARY KEY("weapId" AUTOINCREMENT))]=]
		myDB:exec[=[CREATE TABLE "holditems" (	"hiId"	INTEGER NOT NULL UNIQUE,	"hiName"	TEXT NOT NULL UNIQUE,	"hiLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("hiId" AUTOINCREMENT))]=]
		myDB:exec[=[CREATE TABLE "shields" (	"shieldId"	INTEGER NOT NULL UNIQUE,	"shieldName"	TEXT NOT NULL UNIQUE,	"shieldLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("shieldId" AUTOINCREMENT))]=]
		myDB:exec[=[INSERT INTO dbVer VALUES (1);]=]
		myDB:close()
		print("WeaponMaster db created!")
		
	end
	
	function inputLevel()
		results = utils.inputbox ("Item Level", "Enter Level","","Courier",10,{validate = level_Check,max_length = 3})
		return results
	end
	
	function level_check(l)
		local n = tonumber (l)
		
		if not n then
			utils.msgbox (l .. " is not numeric")
			return false
		end
		
		if n &lt; 1 or n > 291 then
			utils.msgbox (l .. " is out of range 1 to 291")
			return false
		end
				
		return true
	end
	
	function chooseMHOH()
		t = {"Main Hand","Off Hand"}
		results = utils.choose ("Main hand or Off hand?", "Weapon info", t, 1)
		if results then
			return results
		else
			return 1
		end	
	end
	
	function choosePriAlt()
		t = {"Primary","Alternative"}
		results = utils.choose ("Primary weapon or alternative?", "Weapon info", t, 1)
		if results then
			return results
		else
			return 1
		end
	end
	
	function weaponInsert(wi_weapname)
		local dup = weaponDupCheck(wi_weapname)
		if dup == true then
			print("Weapon already exists!")
		else
			resultsLevel = inputLevel()
			resultsMHOH = chooseMHOH()
			resultsPriAlt = choosePriAlt()
			insertWeapon(wi_weapname,resultsLevel,resultsMHOH,resultsPriAlt)
		end
	end
		
	function weaponDupCheck(iw_weapname)
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local dupCheck = false
		local sQL = "SELECT * FROM weapons WHERE weapname = '" ..iw_weapname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertWeapon(iw_weapname,iw_weaplevel,iw_weapmainoff,iw_weapprialt)
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "INSERT INTO weapons (weapName,weapLevel,weapMainOff,weapPriAlt) VALUES ('" ..iw_weapname.. "'," ..iw_weaplevel.. "," ..iw_weapmainoff.. "," ..iw_weapprialt.. ");"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Weapon Added!")
		end
	end
	
	function holdInsert(hi_holdname)
		local dup = holdDupCheck(hi_holdname)
		if dup == true then
			print("Hold item already exists!")
		else
			resultsLevel = inputLevel()
			insertHold(hi_holdname,resultsLevel)
		end
	end
	
	function holdDupCheck(ih_holdname)
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local dupCheck = false
		local sQL = "SELECT * FROM holditems WHERE hiName = '" ..ih_holdname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertHold(ih_holdname,ih_holdlevel)
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "INSERT INTO holditems (hiName,hiLevel) VALUES ('" ..ih_holdname.. "'," ..ih_holdlevel.. ");"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Hold item Added!")
		end
	end
	
	function shieldInsert(si_shieldname)
		local dup = shieldDupCheck(si_shieldname)
		if dup == true then
			print("Sheild already exists!")
		else
			resultsLevel = inputLevel()
			insertShield(si_shieldname,resultsLevel)
		end
	end
	
	function shieldDupCheck(is_shieldname)
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "SELECT * FROM shields WHERE shieldName = '" ..is_shieldname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertShield(is_shieldname,is_shieldlevel)
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "INSERT INTO shields (shieldName,shieldLevel) VALUES ('" ..is_shieldname.. "'," ..is_shieldlevel.. ");"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Shield Added!")
		end
	end
	
	function shieldUp()
		SetVariable("wm_ShieldUp", "ShieldUp")
		SendNoEcho ("take " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_HoldCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		SendNoEcho ("take " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_ShieldCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		SendNoEcho ("hold " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_ShieldCurrent")))
		SendNoEcho ("hold " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_HoldCurrent")))
		SendNoEcho ("put " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_OHCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
	end
	
	function shieldDown()
		SetVariable("wm_ShieldUp", "ShieldDown")
		SendNoEcho ("take " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_OHCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		SendNoEcho ("second " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_OHCurrent")))
		SendNoEcho ("put " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_ShieldCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		SendNoEcho ("put " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_HoldCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
	end
	
	function altUp()
		if Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltCurrent")) ~= "None" then
			SetVariable("wm_AltUp", "Alt")
			SendNoEcho ("take " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho ("wield " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltCurrent")))
			SendNoEcho ("put " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_MHCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		else
			Print("No Alt weapons set!")
		end
	end
	
	function altDown()
		if Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltCurrent")) ~= "None" then
			SetVariable("wm_AltUp", "Pri")
			SendNoEcho ("take " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_MHCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho ("wield " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_MHCurrent")))
			SendNoEcho ("put " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltCurrent")).. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		else
			Print("No Alt weapons set!")
		end
	end
	
	function getMHName()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local modLevel = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_CurrentLevel"))
		modLevel = modLevel + (Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_Tier")) * 10)
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 1 AND weapPriAlt = 1 ORDER BY weapLevel DESC LIMIT 1"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do mhCurrent = row.weapName end
		returnInfo = mhCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getOHName()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local modLevel = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_CurrentLevel"))
		modLevel = modLevel + (Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_Tier")) * 10)
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 2 AND weapPriAlt = 1 ORDER BY weapLevel DESC LIMIT 1"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do ohCurrent = row.weapName end
		returnInfo = ohCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getAltName()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local modLevel = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_CurrentLevel"))
		modLevel = modLevel + (Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_Tier")) * 10)
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 1 AND weapPriAlt = 2 ORDER BY weapLevel DESC LIMIT 1"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altCurrent = row.weapName end
		returnInfo = altCurrent
		myDB:close()
		if returnInfo == nil then
			returnInfo = "None"
		end
		return returnInfo
	end
	
	function getHoldName()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local modLevel = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_CurrentLevel"))
		modLevel = modLevel + (Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_Tier")) * 10)
		local sQL = "SELECT hiName FROM holditems WHERE hiLevel &lt;= " ..modLevel.. " ORDER BY hiLevel DESC LIMIT 1"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do holdCurrent = row.hiName end
		returnInfo = holdCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getShieldName()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local modLevel = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_CurrentLevel"))
		local modLevel = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_CurrentLevel"))
		modLevel = modLevel + (Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_Tier")) * 10)
		local sQL = "SELECT shieldName FROM shields WHERE shieldLevel &lt;= " ..modLevel.. " ORDER BY shieldLevel DESC LIMIT 1"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do shieldCurrent = row.shieldName end
		returnInfo = shieldCurrent
		myDB:close()
		
		return returnInfo
	end

	function weapSwap()
		local altUp = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltUp"))
		local shieldUp = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_ShieldUp"))
		local newMHName = getMHName()
		local currentMHName = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_MHCurrent"))
		if newMHName ~= currentMHName and altUp == "Pri" then
			SetVariable("wm_MHCurrent", newMHName)
			SendNoEcho("get " ..newMHName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho("wield " ..newMHName)
			SendNoEcho("put " ..currentMHName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		elseif newMHName ~= currentMHName and altUp == "Alt" then
			SetVariable("wm_MHCurrent", newMHName)
		end
		
		local newOHName = getOHName()
		local currentOHName = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_OHCurrent"))
		if newOHName ~= currentOHName and shieldUp == "ShieldDown" then
			SetVariable("wm_OHCurrent", newOHName)
			SendNoEcho("get " ..newOHName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho("second " ..newOHName)
			SendNoEcho("put " ..currentOHName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		elseif newOHName ~= currentOHName and shieldUp == "ShieldUp" then
			SetVariable("wm_OHCurrent", newOHName)
		end
		
		local newHoldName = getHoldName()
		local currentHoldName = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_HoldCurrent"))
		if newHoldName ~= currentHoldName and shieldUp == "ShieldUp" then
			SetVariable("wm_HoldCurrent", newHoldName)
			SendNoEcho("get " ..newHoldName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho("wear " ..newHoldName)
			SendNoEcho("put " ..currentHoldName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		elseif newHoldName ~= currentHoldName and shieldUp == "ShieldDown" then
			SetVariable("wm_HoldCurrent", newHoldName)
		end
		
		local newShieldName = getShieldName()
		local currentShieldName = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_ShieldCurrent"))
		if newOHName ~= currentOHName and shieldUp == "ShieldUp" then
			SetVariable("wm_ShieldCurrent", newShieldName)
			SendNoEcho("get " ..newShieldName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho("wear " ..newShieldName)
			SendNoEcho("put " ..currentShieldName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		elseif newOHName ~= currentOHName and shieldUp == "ShieldDown" then
			SetVariable("wm_ShieldCurrent", newShieldName)
		end
		
		local newAltName = getAltName()
		local currentAltName = Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_AltCurrent"))
		if newAltName ~= currentAltName and altUp == "Alt" then
			SetVariable("wm_AltCurrent", newAltName)
			SendNoEcho("get " ..newAltName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
			SendNoEcho("wield " ..newAltName)
			SendNoEcho("put " ..currentAltName.. " " ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_WeapBag")))
		elseif newAltName ~= currentAltName and altUp == "Pri" then
			SetVariable("wm_AltCurrent", newAltName)
		end
	end
	
	function getWeaponList()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "SELECT weapName,weapLevel,weapMainOff,weapPriAlt FROM weapons ORDER BY weapLevel,weapMainOff,weapPriAlt"
		local priAlt = ""
		local mainOff = ""
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("                    Weapon List                        ")
			print("    Name         Level       Main/Off      Pri/Alt     ")
			print("---------------------------------------------------------------")
		for row in myDB:nrows(sQL) do
			if row.weapMainOff == 1 then
				mainOff = "MainHand"
			else
				mainOff = "OffHand"
			end
			if row.weapPriAlt == 1 then
				priAlt = "Primary"
			else
				priAlt = "Alternate"
			end
			print(" " ..row.weapName.. "         " ..row.weapLevel.. "         " ..mainOff.. "         " ..priAlt)
		
		end	
			print("---------------------------------------------------------------")
		myDB:close()
		
	end
	
	function getHoldList()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "SELECT hiName,hiLevel FROM holditems ORDER BY hiLevel"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("        Hold List            ")
			print("    Name         Level       ")
			print("-----------------------------")
		for row in myDB:nrows(sQL) do
			print(" " ..row.hiName.. "         " ..row.hiLevel)
		end	
			print("-----------------------------")
		myDB:close()
		
	end
	
	function getShieldList()
		dbPathandName = GetInfo (66) ..Trim(GetPluginVariable ("d184f5b20159962807daf036","wm_DBFile"))
		local sQL = "SELECT shieldName,shieldLevel FROM shields ORDER BY shieldLevel"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("       Shield List           ")
			print("    Name         Level       ")
			print("-----------------------------")
		for row in myDB:nrows(sQL) do
			print(" " ..row.shieldName.. "         " ..row.shieldLevel)
		end	
			print("-----------------------------")
		myDB:close()
		
	end
	
</script>
</muclient>
